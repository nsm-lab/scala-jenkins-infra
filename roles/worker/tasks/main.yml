---
- name: Create jenkins user
  user: name="{{jenkins_user}}" home="{{jenkins_home}}"

- name: Ensure fs for jenkins home
  filesystem:
    fstype: ext4
    dev: "{{ec2_vol_worker.device_name}}"

- name: Mount jenkins worker home
  mount:
    src: "{{ec2_vol_worker.device_name}}"
    path: "{{jenkins_home}}"
    fstype: ext4
    opts: noatime
    state: mounted
  notify: daemon reload
  tags:
    - ec2

- name: Check if swap dev exists
  stat:
    path: "{{ec2_vol_worker_swap.device_name}}"
  tags:
    - ec2
  register: swap_dev

- name: Check filesystem on swap dev
  shell: "blkid -s TYPE -o value {{ec2_vol_worker_swap.device_name}}"
  when: swap_dev.stat.exists
  ignore_errors: true
  tags:
    - ec2
  register: swapblk

- name: Make swap (if no FS found)
  shell: "mkswap {{ec2_vol_worker_swap.device_name}}"
  tags:
    - ec2
  when: swap_dev.stat.exists and swapblk.rc == 2

- name: Ensure swap is in fstab
  mount:
    src: "{{ec2_vol_worker_swap.device_name}}"
    name: swap
    fstype: swap
    state: present
  tags:
    - ec2
  when: swap_dev.stat.exists
  notify: daemon reload

- name: Ensure swap is used
  shell: "swapon -a"
  tags:
    - ec2


- name: Create jenkins dirs
  file: path={{item}} state=directory owner="{{jenkins_user}}" mode="0755"
  with_items:
      - "{{jenkins_home}}"
      - "{{jenkins_home}}/tmp"
      - "{{jenkins_home}}/.ssh"
      - "{{jenkins_home}}/.m2"

- name: Give core team access to jenkins user
  authorized_key: user="{{jenkins_user}}" state="present" key="https://github.com/{{item}}.keys"
  with_items:
      - adriaanm
      - lrytz
      - SethTisue
      - retronym
      - szeiger

- name: Fetch public key generated by master
  shell: cat "/var/lib/jenkins/.ssh/id_worker.pub" # TODO use hostvars['master'].jenkins_home or something like that
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups.master }}"
  register: pubkey
  when: not 'publisher' in group_names

- name: Authorize public key generated by master
  authorized_key: user="{{jenkins_user}}" key="{{item.stdout}}"
  with_items:
    - "{{ pubkey.results }}"
  when: not 'publisher' in group_names

- name: Lookup our hostname
  shell: hostname
  register: hostname

# must connect to hostname (private ip) due to firewall
- name: Have jenkins on master accept our host key
  become_user: "{{jenkins_user}}"
  delegate_to: "{{ item }}"
  command: "ssh -oStrictHostKeyChecking=no {{hostname.stdout}} -i /var/lib/jenkins/.ssh/id_worker true"
  with_items:
    - "{{ groups.master }}"
  when: not 'publisher' in group_names

- name: Copy Maven settings (public jobs)
  no_log: true
  template: src="m2-settings-pub.xml" dest="{{jenkins_home}}/.m2/settings.xml"      owner="{{jenkins_user}}" mode="0600"

- name: Copy Private repo credentials (public jobs)
  no_log: true
  template: src="credentials-private-repo" dest="{{jenkins_home}}/.credentials" owner="{{jenkins_user}}" mode="0600"



# full /etc/apt/sources.list:
# deb http://cdn-aws.deb.debian.org/debian stretch main
# deb http://security.debian.org/debian-security stretch/updates main
# deb http://cdn-aws.deb.debian.org/debian stretch-updates main
# deb http://cdn-aws.deb.debian.org/debian stretch-backports main
- name: Add apt repo for Java 9 backports
  apt_repository: repo='deb http://cdn-aws.deb.debian.org/debian stretch-backports main'

- name: Install openjdk
  apt: name={{item}} state=installed
  with_items:
       # - openjdk-6-jdk
       # - openjdk-7-jdk
       - openjdk-8-jdk
       - openjdk-9-jdk

# TODO investigate https://github.com/sdkman/sdkman-cli

- name: Copy jvm-select script
  copy: src=jvm-select dest=/usr/local/share/jvm/ owner=root mode=755


- name: Install basic packages
  apt: name={{item}} state=installed
  with_items:
       - ant
       - ant-contrib
       - ant-optional
       - apt-transport-https
       - maven
       - tofrodos

- name: Create sbt launcher path
  file: path="{{sbt_launcher_path}}" state=directory

- name: Download sbt launcher
  get_url:
      url: "https://repo.lightbend.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/{{ sbt_version }}/sbt-launch.jar"
      dest: "{{sbt_launcher_path}}"
      owner: root
      mode: "755"

- name: Install the gpg key for nodejs LTS
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    state: present

- name: Add apt repo for nodejs LTS
  apt_repository:
    repo: "deb https://deb.nodesource.com/node_6.x stretch main"
    state: present
    update_cache: yes

- name: Install nodejs
  apt:
    name: nodejs
    state: present

- include_tasks: publisher.yml
  when: "'publisher' in group_names"