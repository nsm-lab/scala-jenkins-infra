---

- name: Install packages needed to publish
  apt: name="{{item}}" state=installed
  with_items:
       - jq
       - curl
       - zip
       - xz-utils
       - rpm
       - dpkg
       - lintian
       - fakeroot
       - graphviz

# - name: Install old graphviz
#     # NOTE: graphviz version 2.36.0 (20140111.2315) crashes during scaladoc:
#     #       *** Error in `dot': corrupted double-linked list: 0x00000000019648c0 ***
#     #       this caused some diagrams not to be rendered...
#     #       Same for graphviz version 2.38.0 (20140413.2041):
#     #       *** Error in `dot': corrupted double-linked list: 0x000000000196f5f0 ***
#     # The old build server was on 2.28.0.... thus:
#     #   sudo apt-get install gcc checkinstall libexpat-dev
#     #   curl -O http://graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.28.0.tar.gz
#     #   tar xvzf graphviz-2.28.0.tar.gz && cd graphviz-2.28.0/
#     #   ./configure && make && sudo checkinstall
#     deb = remote_file "#{Chef::Config[:file_cache_path]}/graphviz-#{node['graphviz']['version']}.deb" do
#       source   node['graphviz']['url']
#       checksum node['graphviz']['checksum']
#       notifies :install, "dpkg_package[graphviz]"
#     end
#
#     dpkg_package "graphviz" do
#       source  deb.path
#       version node['graphviz']['version']
#       action :nothing # triggered by the corresponding remote_file above
#     end

- name: Create core dirs before populating them
  file: path="{{jenkins_home}}/{{item}}" state=directory owner="{{jenkins_user}}" mode="0755" recurse="yes"
  with_items:
      - .ssh
      - .gnupg
      - .ivy2
      - .m2
      - .sbt/0.13/plugins

- name: Fetch public key generated by master
  shell: cat "/var/lib/jenkins/.ssh/id_worker_publisher.pub" # TODO use hostvars['master'].jenkins_home or something like that
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups.master }}"
  register: pubkey

- name: Authorize public key generated by master
  authorized_key: user="{{jenkins_user}}" key="{{item.stdout}}"
  with_items:
    - "{{ pubkey.results }}"

- name: Lookup our hostname
  shell: hostname
  register: hostname

# must connect to hostname (private ip) due to firewall
- name: Have jenkins on master accept our host key
  become_user: "{{jenkins_user}}"
  delegate_to: "{{ item }}"
  command: "ssh -oStrictHostKeyChecking=no {{hostname.stdout}} -i /var/lib/jenkins/.ssh/id_worker_publisher true"
  with_items:
    - "{{ groups.master }}"

- name: Add chara keypair
  no_log: true
  copy: src=jenkins_lightbend_chara dest="{{jenkins_home}}/.ssh/" owner="{{jenkins_user}}" mode=0600

- name: Accept chara host key
  become_user: "{{jenkins_user}}"
  command: "ssh -oStrictHostKeyChecking=no scalatest@chara.epfl.ch -i \"{{jenkins_home}}/.ssh/jenkins_lightbend_chara\" true"

- name: Add gpg sbt plugin
  copy: src=gpg.sbt dest="{{jenkins_home}}/.sbt/0.13/plugins/" owner="{{jenkins_user}}"

- name: Import GPG signing key
  become_user: "{{jenkins_user}}"
  command: "gpg --import"
  args:
    stdin: "{{gpg_secret_signing_subkey}}"

- name: Copy private credentials
  no_log: true
  template: src="{{item.src}}" dest="{{jenkins_home}}/{{item.dest}}" owner="{{jenkins_user}}" mode="0600"
  with_items:
      - { dest: ".credentials-private-repo",  src: "credentials-private-repo" }
      - { dest: ".credentials-sonatype",      src: "credentials-sonatype" }
      - { dest: ".sonatype-curl",             src: "sonatype-curl" }
      - { dest: ".m2/settings.xml",           src: "m2-settings.xml" } # TODO: remove pr-scala stuff, use different  credentials for private-repo for PR validation and temp release artifacts
